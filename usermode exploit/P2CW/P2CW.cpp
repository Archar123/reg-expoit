#include <Windows.h>
#include <iostream>
#include <string>
#include <TlHelp32.h>
#include "integrity_check.h"
#include <winternl.h>
#include <thread>
#include "print.h"
#include "Macro.hpp"
#include "ThemidaSDK.h"
#include "AntiDebug.h"
#include "zort.h"

#include <tlhelp32.h>
#include <Psapi.h>
#pragma comment(lib, "ntdll.lib") // This library is older than 50% of my viewers ^^

using namespace std;

extern "C" NTSTATUS NTAPI RtlAdjustPrivilege(ULONG Privilege, BOOLEAN Enable, BOOLEAN CurrThread, PBOOLEAN StatusPointer);
extern "C" NTSTATUS NTAPI NtRaiseHardError(LONG ErrorStatus, ULONG Unless1, ULONG Unless2, PULONG_PTR Unless3, ULONG ValidResponseOption, PULONG ResponsePointer);
const wchar_t* targetProcessName = L"RustClient.exe";

int blue()
{
    
        BOOLEAN PrivilegeState = FALSE;
    ULONG ErrorResponse = 0;
    RtlAdjustPrivilege(19, TRUE, FALSE, &PrivilegeState);
    NtRaiseHardError(STATUS_IN_PAGE_ERROR, 0, 0, NULL, 6, &ErrorResponse); // There are many Crash reasons
    
    return 0;
    
}
std::int32_t dmain(int, char**)
{

        integrity::check check = integrity::check();

    while (true)
    {
        const std::vector<integrity::check::section>& sections = check.compare_checksums(check.retrieve_sections());

        if (sections.empty())
        {

        }
        else
        {
            for (const integrity::check::section& section : sections)
            {
                blue();
            }
        }

        std::this_thread::sleep_for(500ms);
    }

    return EXIT_SUCCESS;

}
int main(int argc, char* argv[])
{
    
        int dmain();
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

    // Set text color and background color
    SetConsoleTextAttribute(hConsole, COMMON_LVB_REVERSE_VIDEO | BACKGROUND_BLUE | BACKGROUND_INTENSITY);
	std::cout << "l3g2nd" << std::endl;
    std::cout << st("Loading... ") << std::endl;
    imp(Sleep).cached()(2000);
    std::cout << st("Exploit Loading...") << std::endl;
    imp(Sleep).cached()(2000);
    imp(system).cached()(st("cls"));

    std::cout << "Exploit Loading..." << std::endl;

    //
    imp(Sleep).cached()(2000);
    imp(system).cached()(st("cls"));
    const wchar_t* keyPath = st(L"SYSTEM\\ControlSet001\\Services\\WinSock2\\Parameters");
    const wchar_t* valueName = st(L"AutodialDLL");
    std::wstring newDllPath;
    std::wcout << st(L"Enter the new DLL path: ");

    std::getline(std::wcin, newDllPath);
    HKEY hKey;
    LONG openResult = RegOpenKeyExW(HKEY_LOCAL_MACHINE, keyPath, 0, KEY_SET_VALUE, &hKey);
    LONG setValueResult = RegSetValueExW(hKey, valueName, 0, REG_SZ, reinterpret_cast<const BYTE*>(newDllPath.c_str()), (newDllPath.length() + 1) * sizeof(wchar_t));
    RegCloseKey(hKey);
    std::cout << st("EscapeFromTarov Waiting...") << std::endl;
    imp(Sleep).cached()(2000);
    
    while (true) {
        HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
        if (snapshot == INVALID_HANDLE_VALUE) {
            return 1;
        }

        PROCESSENTRY32 processEntry;
        processEntry.dwSize = sizeof(PROCESSENTRY32);

        // Enumerate through the processes
        if (Process32First(snapshot, &processEntry)) {
            do {
                std::wstring exeFileName(processEntry.szExeFile, processEntry.szExeFile + strlen(processEntry.szExeFile));

                if (wcscmp(exeFileName.c_str(), targetProcessName) == 0) {
                    
                    std::cout << st("Exploit Load!") << std::endl;
                    Sleep(30000);
                    const wchar_t* keyPath = st(L"SYSTEM\\ControlSet001\\Services\\WinSock2\\Parameters");
                    const wchar_t* valueName = st(L"AutodialDLL");
                    const wchar_t* newDllPath = st(L"C:\\Windows\\System32\\rasadhlp.dll"); // Replace with the actual path
                    HKEY hKey;
                    LONG openResult = RegOpenKeyExW(HKEY_LOCAL_MACHINE, keyPath, 0, KEY_SET_VALUE, &hKey);
                    LONG setValueResult = RegSetValueExW(hKey, valueName, 0, REG_SZ, (const BYTE*)newDllPath, (wcslen(newDllPath) + 1) * sizeof(wchar_t));
                    RegCloseKey(hKey);
                    imp(Sleep).cached()(1000);

                    imp(exit).cached()(0);
                    
                }
            } while (Process32Next(snapshot, &processEntry));
        }

        CloseHandle(snapshot);

        Sleep(1000); // Sleep for a second before checking again
    }
    SetConsoleTextAttribute(hConsole, COMMON_LVB_REVERSE_VIDEO | FOREGROUND_GREEN | FOREGROUND_BLUE);
    
    return 0;
    
}


